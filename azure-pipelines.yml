trigger:
- master

stages:
  - stage: Build_App
    displayName: Build the Application
    jobs:
    - job: Build_App_Job
      displayName: Build the Application
      
      pool:
        vmImage: 'ubuntu-latest'

      variables:
        buildConfiguration: 'Release'

      steps:
        - task: UseDotNet@2 
          displayName: ".NET Core 3.1.x"
          inputs:
            version: '3.1.x'
            packageType: sdk
        - script: dotnet build --configuration $(buildConfiguration)
          displayName: 'dotnet build $(buildConfiguration)'

        - task: DotNetCoreCLI@2
          displayName: "Test"
          inputs:
            command: test
            projects: '**/*Tests/*.csproj'
            arguments: '--configuration $(buildConfiguration)'

        - task: DotNetCoreCLI@2
          displayName: "Publish"
          inputs:
            command: 'publish'
            publishWebProjects: true
            arguments: '-r linux-x64 --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) --self-contained true'
            zipAfterPublish: true

        - task: PublishBuildArtifacts@1
          displayName: "Upload Artifacts"
          inputs:
            pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
            artifactName: 'linux-x64'

  - stage: Build_Docker_Image
    displayName: Build Docker Image
    jobs:  
    - job: Build_Docker_Image_Job
      displayName: Build Docker Image
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: Docker@2
        displayName: Build an image
        inputs:
          command: build
          dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
          tags: |
            $(tag)

  - stage: Deploy
    jobs:
    - deployment: Deploy
      displayName: deploy the App
      pool:
        vmImage: 'Ubuntu-latest'
      # creates an environment if it doesn't exist
      environment: 'anas ubuntu'
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: linux-x64
            - script: echo Download Artifact

  - stage: API_Testing
    displayName: Test the API using Newman
    jobs:
    - job: API_Testing_Job
      displayName: Test the API using Newman
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '10.x'
        displayName: 'Install Node.js'
      - script: |
          npm install
          npm run build
          npm install -g newman
          newman run ./postman_collection.json
